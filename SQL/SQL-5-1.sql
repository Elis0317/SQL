/*****************************
ビュー
	テーブルと同じだが、実際のデータは保存していない
	ビューはSELECT文を保存しており、ビューからデータを取り出そうとするときに、
	ビューは内部的にそのSELECT文を実行し、一時的に仮想のテーブルを作る

ビューのメリット
	1) データを保存しないため、記憶装置の容量を節約できる
	2)頻繁に使うSELECT文をいちいち毎回書かなくても、ビューとして保存することで使い回しが効く
		一度ビューを作っておけば、呼び出すだけで簡単にSELECT文の結果が得られる
		
		ビューが含むデータは、元のデータと連動して自動的に最新の状態に更新される
			｢ビューを参照する」 = 「そのSELECT文を実行する」

CREATE VIEW ビュー名 (<ビューの列名1>, <ビューの列名2>, ......)
AS
<SELECT文>
*****************************/

-- ShohinSunビュー
-- 商品分類ごとに商品数を集計した結果(cnt_shohin)を保存
CREATE VIEW ShohinSum (shohin_bunrui, cnt_shohin)	-- <= ビューの列名
AS
SELECT shohin_bunrui, COUNT(*)	-- )
  FROM Shohin					-- ) ビュー定義の本体(中身はただのSELECT文）
 GROUP BY shohin_bunrui;		-- )

-- ビューを使う
SELECT shohin_bunrui, cnt_shohin
  FROM ShohinSum;	-- <=テーブルの代わりにビューを指定する


/*****************************
ビューの制限事項
	1) ビュー定義で ORDER BYは使えない
		テーブル同様、ビューについても｢行には順序がない｣ため。
		
	2) ビューに対する更新
		ビューに対して、INSERT, DELETE, UPDATEなどは基本的に使用不可
		
		具体例(エラー)
		 INSERT INTO ShohinSum VALUES ('電化製品', 5);
		 
		 この場合、ShohinSumビューでは正常な処理（商品分類が電化製品、商品数が5）が行える。
		 しかし、ShohinSum｢テーブル｣からみるとINSERT文は、
		 	「テーブルのshohin_bunruiに5レコード追加すること」しか分からない。
		 	（つまり、商品IDや販売単価など、商品分類以外は不明の行が、5行できることになる）
		 	

ビューの削除
	DROP VIEW文を使う。
DROP VIEW ビュー名 (<ビューの列名1>, <ビューの列名2>, ......)
*****************************/

DROP VIEW ShohinSum;
